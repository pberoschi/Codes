# -*- coding: utf-8 -*-
"""MACD_SGráfico_3 Dias

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T4tiQaQE3U3ofowRrZImV-zEDLc-ZcHy
"""

#importar as lib

import telegram
import yfinance as yf
import pandas as pd
yf.pdr_override()
 
pd.options.mode.chained_assignment = None 
 
ticker = [
'ABEV3.SA',
 'AMAR3.SA',
 'ARZZ3.SA',
 'ASAI3.SA',
 'AZUL4.SA',
 'B3SA3.SA',
 'BBAS3.SA',
 'BBDC3.SA',
 'BBDC4.SA',
 'BBSE3.SA',
 'BEEF3.SA',
 'BIDI11.SA',
 'BPAC11.SA',
 'BRAP4.SA',
 'BRDT3.SA',
 'BRFS3.SA',
 'BRKM5.SA',
 'BRML3.SA',
 'BTOW3.SA',
 'CCRO3.SA',
 'CIEL3.SA',
 'CMIG4.SA',
 'COGN3.SA',
 'CPFE3.SA',
 'CPLE6.SA',
 'CRFB3.SA',
 'CSAN3.SA',
 'CSNA3.SA',
 'CVCB3.SA',
 'CYRE3.SA',
 'ECOR3.SA',
 'EGIE3.SA',
 'ELET3.SA',
 'ELET6.SA',
 'EMBR3.SA',
 'ENBR3.SA',
 'ENEV3.SA',
 'ENGI11.SA',
 'EQTL3.SA',
 'EZTC3.SA',
 'FLRY3.SA',
 'GGBR4.SA',
 'GNDI3.SA',
 'GOAU4.SA',
 'GOLL4.SA',
 'HAPV3.SA',
 'HGTX3.SA',
 'HYPE3.SA',
 'IGTA3.SA',
 'IRBR3.SA',
 'ITSA4.SA',
 'ITUB4.SA',
 'JBSS3.SA',
 'JHSF3.SA',
 'KLBN11.SA',
 'LAME4.SA',
 'LCAM3.SA',
 'LREN3.SA',
 'LWSA3.SA',
 'MGLU3.SA',
 'MOVI3.SA',
 'MRFG3.SA',
 'MRVE3.SA',
 'MULT3.SA',
 'NTCO3.SA',
 'OIBR3.SA',
 'PCAR3.SA',
 'PETR3.SA',
 'PETR4.SA',
 'PRIO3.SA',
 'QUAL3.SA',
 'RADL3.SA',
 'RAIL3.SA',
 'RENT3.SA',
 'SANB11.SA',
 'SBSP3.SA',
 'SULA11.SA',
 'SUZB3.SA',
 'TAEE11.SA',
 'TIMS3.SA',
 'TOTS3.SA',
 'UGPA3.SA',
 'USIM5.SA',
 'VALE3.SA',
 'VIVR3.SA',
 'VIVT3.SA',
 'VVAR3.SA',
 'WEGE3.SA',
 'YDUQ3.SA',
 
 
  'BBRC11.SA',
  'BTCR11.SA',
  'CPFF11.SA',
  'FIIP11B.SA',
  'HABT11.SA',
  'PLCR11.SA',
  'PORD11.SA',
  'RBBV11.SA',
  'RBED11.SA',
  'RBRR11.SA',
  'RBVA11.SA',
  'SADI11.SA',
  'SARE11.SA',
  'SHPH11.SA',
  'TRXF11.SA',
  'VGIR11.SA',
  'XPCI11.SA'
  ]
 
# ANALISE DE CADA PAPEL
for x in ticker:
    dia2 = yf.Ticker(x)
    Dia = dia2.history(period='1d', interval='5m').tail(1)
    mediaporMinuto = dia2.history(period='1d', interval='1m')
    mediaporMinuto = mediaporMinuto['Close'].mean()
    mediaporMinuto = round(mediaporMinuto, 3)
    Ano = yf.download(x, period='1y')
    print(x)     
    #ANO: criando coluna Data e transferindo valores
    Ano.insert(loc=0, column='DataMain', value=Ano.index)
    #remove a ultima data
    removedata = Ano.loc[(Ano['DataMain']==pd.to_datetime('today').normalize())]
    Ano = Ano.drop(removedata.index)
    #DIA: criando coluna Data e transferindo valores
    Dia.insert(loc=0, column='DataMain', value=Dia.index)
    #unindo os periodos
    Resumo = Ano.append(Dia)
    #ajuste da data
    Resumo['DataMain'] = pd.to_datetime(Resumo['DataMain'], utc=True).dt.date
    #resumindo as colunas desejadas (data e fechamento)
    ResumoEnd = Resumo[['DataMain', 'Close']]
    #calculo MACD
    rapidoMME = ResumoEnd.Close.ewm(span=12).mean()
    lentaMME = ResumoEnd.Close.ewm(span=26).mean()
    MACD = rapidoMME - lentaMME
    Sinal = MACD.ewm(span=9).mean()
    ResumoEnd['MACD'] = MACD
    ResumoEnd['Sinal'] = Sinal
    #ajuste index e retira data; coloca data como index
    ResumoEnd = ResumoEnd.set_index(pd.DatetimeIndex(ResumoEnd['DataMain'].values))
    ResumoEnd = ResumoEnd.drop('DataMain', 1)
    # criar código para verificar a compra ou venda
    ResumoEnd['flag'] = ''
    ResumoEnd['preco_compra'] = ''
    ResumoEnd['preco_venda'] = ''
    for i in range (1, len(ResumoEnd.Sinal)):
      if ResumoEnd['MACD'][i] > ResumoEnd['Sinal'][i]:
        if ResumoEnd['flag'][i-1] == 'C':
          ResumoEnd['flag'][i] = 'C'
        else:
          ResumoEnd['flag'][i] = 'C'
          ResumoEnd['preco_compra'][i] = ResumoEnd['Close'][i]
 
      elif ResumoEnd['MACD'][i] < ResumoEnd['Sinal'][i]:
          if ResumoEnd['flag'][i-1] == 'V':
              ResumoEnd['flag'][i] = 'V'
          else:
              ResumoEnd['flag'][i] = 'V'
              ResumoEnd['preco_venda'][i] = ResumoEnd['Close'][i]
 
          
    if ResumoEnd['flag'][i] == 'C'and ResumoEnd['flag'][i-1] == 'C' and ResumoEnd['flag'][i-2] == 'C' and ResumoEnd['flag'][i-3] == 'V':
      #dia3 = float(ResumoEnd['Close'][i-2])
      #dia2 = float(ResumoEnd['Close'][i-1])
      #dia1 = float(ResumoEnd['Close'][i])
      #print(f'Esse: {x}')
      #diasSUB.append(x)
      #print('-'* 50)
      #print('** OK ** >>> 3 dias de subidas consecutivas')
      #print(round(dia3, 2))
      #print(round(dia2, 2))
      #print(round(dia1, 2))    
      # mensagem ao TELEGRAM
 
      my_token = '1852343442:AAEBBS1NjjFRIqt-XTbb3rzRxipvk8ZqI5I'
      chat_id = '-351556985'
      def envia_mensagem(msg, chat_id, token = my_token):
        bot = telegram.Bot(token = token)
        bot.sendMessage(chat_id = chat_id, text=msg)
      site = f'https://www.google.com/search?q={x}&rlz=1C1EJFC_enBR915BR916&oq={x}&aqs=chrome..69i57j0l5j0i10i433j69i60.4408j0j7&sourceid=chrome&ie=UTF-8'
      sitegraf = 'https://colab.research.google.com/drive/14RRUQ5kp2Fe5s0YxJYG6TxzZKjr2QuBN#scrollTo=FW4PN3thzzrg'
      preco_fechamento = round(ResumoEnd.Close.tail(1)[-1],2)
      msg = f'{x}  \n>>> C (3 DIAS) <<< \nPreço de Fechamento: {preco_fechamento} \nPreço Médio/Dia: {mediaporMinuto} \n\nTotal de ações analisadas: {len(x)}\n {site} \n\n{sitegraf}'
      envia_mensagem(msg, chat_id, my_token)
      #time.sleep(0.5)

